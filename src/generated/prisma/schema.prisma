// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions       Transaction[]
  Category           Category[]
  Budget             Budget[]
  Savings            Savings[]
  accounts           Account[]
  sessions           Session[]
  verificationTokens VerificationToken[]
  passwordResetToken PasswordResetToken[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  token   String   @unique
  userId  String
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  token   String   @unique
  userId  String
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model Category {
  id          String       @id @default(cuid())
  name        String
  description String?      @default("")
  type        CategoryType
  icon        String       @default("Package")
  userId      String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  budgets      Budget[]
  transactions Transaction[]
  savings      Savings[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CategoryType {
  EXPENSE
  INCOME
}

model Budget {
  id          String  @id @default(cuid())
  name        String  @default("Monthly Budget")
  categoryId  String
  userId      String
  amount      Float
  description String?
  month       String // "YYYY-MM"

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([categoryId, month])
}

model Savings {
  id           String      @id @default(cuid())
  accountName  String
  categoryId   String
  userId       String
  balance      Float
  interestRate Float
  growth       Float       @default(0)
  accountType  AccountType @default(SAVINGS)
  institution  String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])
}

enum AccountType {
  SAVINGS
  INVESTMENT
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  categoryId  String
  amount      Float
  date        DateTime
  description String
  notes       String?
  type        TransactionType

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])
}

enum TransactionType {
  INCOME
  EXPENSE
}
